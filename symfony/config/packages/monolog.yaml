monolog:
    channels: ["error", "deprecation"]
#        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists
#        - error

when@dev:
    monolog:
        handlers:
            filter_for_errors:
                type: fingers_crossed
                # if *one* log is error or higher, pass *all* to file_log
                action_level: debug
                channels: [ "!event", "!security", "!doctrine" ]
                handler: file_log

            # now passed *all* logs, but only if one log is error or higher
            file_log:
                type: rotating_file
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: warning
                max_files: 1
                formatter: 'monolog.formatter.json'

            message:
                type: fingers_crossed
                action_level: error
                excluded_http_codes: [ 400, 401, 403, 404 ]
                channels: [ "!event", "!security", "!doctrine" ]
                buffer_size: 50
                handler: deduplicated
                formatter: 'monolog.formatter.session_request'
            deduplicated:
                    type: deduplication
                    handler: telegram
            telegram: # Важна только эта часть
                    type: service
                    id: telegramHandlerDebug
                    level: error

            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info

#    attribute.message.formatter:
#        class: Monolog\Formatter\LineFormatter
#        arguments: [ "%%message%% %%context%%\n" ]
when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            filter_for_errors:
                type: fingers_crossed
                # if *one* log is error or higher, pass *all* to file_log
                action_level: error
                handler: file_log

            # now passed *all* logs, but only if one log is error or higher
            file_log:
                type: rotating_file
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                max_files: 5
